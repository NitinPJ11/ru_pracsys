<launch>

<!-- Load World Model-->
<rosparam file="$(find prx_planning)/templates/spaces/space_types.yaml"/> 
<rosparam ns="prx_planning_node/world_model" 
    file="$(find prx_planning)/templates/manipulation/input/simulation/manipulation_simulator.yaml"/> 
<rosparam ns="prx_planning_node/world_model/simulator">
  simulation_step: .1
  manipulator_names:
    -
      simulator/a_left_manipulator
    -
      simulator/a_right_manipulator
  manipulation_sensing_info:
    type: grasp_sensing_info
    sources: ["grasp_sensor2"]
    update_delay: 0.02
  grasp_sensor_source: "grasp_sensor2"
  sensing_info:
    type: point_cloud_sensing_info
    sources: ["point_cloud"]
    update_delay: .1
  sensing:
    type: sensing_model
    sensors:
      point_cloud_sensor:
        type: point_cloud_sensor
        source: "point_cloud"
        topic_name: "/point_cloud"
        obstacle_geometry: "simulator/obstacles/map/point_cloud"
        sensor_delay: 0.1
      grasp_sensor2:
        type: simulated_grasp_sensor
        source: "grasp_sensor2"
        sensor_delay: 0.02
  collision_checker:
    type: fcl
    octomap_resolution: .005
</rosparam>

<rosparam ns="prx_planning_node/world_model/simulator/subsystems/a_left_manipulator" 
    file="$(find prx_planning)/templates/motoman/motoman_complete_kinect.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/a_left_manipulator">
# input_control_space:
#   min: [-.565,-0.7375, -0.7375, -0.7375, -0.7375, -0.87, -0.87, -1.7425,
#          0, 0, 0, 0, 0, 0, 0, 0]
#   max: [.565, 0.7375, 0.7375, 0.7375, 0.7375, 0.87, 0.87, 1.7425, 
#         0, 0, 0, 0, 0, 0, 0, 1]
planning_contexts:
  left_manipulator:
    type: full_mapping
</rosparam>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/a_right_manipulator" 
    file="$(find prx_planning)/templates/motoman/motoman_complete_kinect.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/a_right_manipulator">
hand: right
input_control_space:
  min: [-.565, 0, 0, 0, 0, 0, 0, 0, 
            -0.7375, -0.7375, -0.7375, -0.7375, -0.87, -0.87, -1.7425, 0, 0]
  max: [.565, 0, 0, 0, 0, 0, 0, 0,
            0.7375, 0.7375, 0.7375, 0.7375, 0.87, 0.87, 1.7425, 0, 1]
planning_contexts:
  right_manipulator:
    type: full_mapping
</rosparam>


<!-- Setup objects -->
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/oreo_mega_stuf" 
    file="$(find prx_planning)/templates/object_templates/oreo_mega_stuf.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/champion_copper_plus_spark_plug" 
    file="$(find prx_planning)/templates/object_templates/champion_copper_plus_spark_plug.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/expo_dry_erase_board_eraser" 
    file="$(find prx_planning)/templates/object_templates/expo_dry_erase_board_eraser.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/kong_duck_dog_toy" 
    file="$(find prx_planning)/templates/object_templates/kong_duck_dog_toy.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/genuine_joe_plastic_stir_sticks" 
    file="$(find prx_planning)/templates/object_templates/genuine_joe_plastic_stir_sticks.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/munchkin_white_hot_duck_bath_toy" 
    file="$(find prx_planning)/templates/object_templates/munchkin_white_hot_duck_bath_toy.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/crayola_64_ct" 
    file="$(find prx_planning)/templates/object_templates/crayola_64_ct.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/mommys_helper_outlet_plugs" 
    file="$(find prx_planning)/templates/object_templates/mommys_helper_outlet_plugs.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/sharpie_accent_tank_style_highlighters" 
    file="$(find prx_planning)/templates/object_templates/sharpie_accent_tank_style_highlighters.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/kong_air_dog_squeakair_tennis_ball" 
    file="$(find prx_planning)/templates/object_templates/kong_air_dog_squeakair_tennis_ball.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/stanley_66_052" 
    file="$(find prx_planning)/templates/object_templates/stanley_66_052.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/safety_works_safety_glasses" 
    file="$(find prx_planning)/templates/object_templates/safety_works_safety_glasses.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/dr_browns_bottle_brush" 
    file="$(find prx_planning)/templates/object_templates/dr_browns_bottle_brush.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/laugh_out_loud_joke_book" 
    file="$(find prx_planning)/templates/object_templates/laugh_out_loud_joke_book.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/cheezit_big_original" 
    file="$(find prx_planning)/templates/object_templates/cheezit_big_original.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/paper_mate_12_count_mirado_black_warrior" 
    file="$(find prx_planning)/templates/object_templates/paper_mate_12_count_mirado_black_warrior.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/feline_greenies_dental_treats" 
    file="$(find prx_planning)/templates/object_templates/feline_greenies_dental_treats.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/elmers_washable_no_run_school_glue" 
    file="$(find prx_planning)/templates/object_templates/elmers_washable_no_run_school_glue.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/mead_index_cards" 
    file="$(find prx_planning)/templates/object_templates/mead_index_cards.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/rolodex_jumbo_pencil_cup" 
    file="$(find prx_planning)/templates/object_templates/rolodex_jumbo_pencil_cup.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/first_years_take_and_toss_straw_cup" 
    file="$(find prx_planning)/templates/object_templates/first_years_take_and_toss_straw_cup.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/highland_6539_self_stick_notes" 
    file="$(find prx_planning)/templates/object_templates/highland_6539_self_stick_notes.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/mark_twain_huckleberry_finn" 
    file="$(find prx_planning)/templates/object_templates/mark_twain_huckleberry_finn.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/kyjen_squeakin_eggs_plush_puppies" 
    file="$(find prx_planning)/templates/object_templates/kyjen_squeakin_eggs_plush_puppies.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/kong_sitting_frog_dog_toy" 
    file="$(find prx_planning)/templates/object_templates/kong_sitting_frog_dog_toy.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/subsystems/cone" 
    file="$(find prx_planning)/templates/object_templates/placeholder.yaml"/>

<rosparam ns="prx_planning_node/world_model/simulator/obstacles/cieling" 
    file="$(find prx_planning)/templates/object_templates/ceiling.yaml"/>

<rosparam ns="prx_planning_node/world_model/simulator/obstacles/order_bin" 
    file="$(find prx_planning)/templates/object_templates/order_bin.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/shelf" 
    file="$(find prx_planning)/templates/object_templates/shelf.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/albertos_box" 
    file="$(find prx_planning)/templates/object_templates/albertos_box.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles" 
    file="$(find prx_planning)/templates/environments/point_cloud.yaml" /> 

<!-- Individual Bin Models -->
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_A" 
    file="$(find prx_planning)/templates/object_templates/bin_A.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_B" 
    file="$(find prx_planning)/templates/object_templates/bin_B.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_C" 
    file="$(find prx_planning)/templates/object_templates/bin_C.yaml"/>

<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_D" 
    file="$(find prx_planning)/templates/object_templates/bin_D.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_E" 
    file="$(find prx_planning)/templates/object_templates/bin_E.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_F" 
    file="$(find prx_planning)/templates/object_templates/bin_F.yaml"/>

<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_G" 
    file="$(find prx_planning)/templates/object_templates/bin_G.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_H" 
    file="$(find prx_planning)/templates/object_templates/bin_H.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_I" 
    file="$(find prx_planning)/templates/object_templates/bin_I.yaml"/>

<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_J" 
    file="$(find prx_planning)/templates/object_templates/bin_J.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_K" 
    file="$(find prx_planning)/templates/object_templates/bin_K.yaml"/>
<rosparam ns="prx_planning_node/world_model/simulator/obstacles/bin_L" 
    file="$(find prx_planning)/templates/object_templates/bin_L.yaml"/>


<!-- Load up the Grasp Data -->
<include ns="prx_planning_node" file="$(find prx_planning)../../grasp_data/reflex_database.launch"/>
<include ns="prx_planning_node" file="$(find prx_planning)../../grasp_data/unigripper_database.launch"/>

<rosparam ns="prx_planning_node/world_model/planning_contexts">
left_manipulator:
 default:
  type: "hide_mapping"
</rosparam>
<rosparam ns="prx_planning_node/world_model/planning_contexts">
right_manipulator:
 default:
  type: "hide_mapping"
</rosparam>

<!-- Load Planning Application -->
<rosparam ns="prx_planning_node">
type: motoman_planning_application
random_seed: 123456
load_roadmaps: true
num_ik_seeds: 70
store_IK_data_base: false
load_IK_data_base: true
store_trajectory_data_base: false
load_trajectory_data_base: true
left_IK_data_base:
  distance_metric:
    type: graph_distance_metric
right_IK_data_base:
  distance_metric:
    type: graph_distance_metric
left_cam_IK_data_base:
  distance_metric:
    type: graph_distance_metric
right_cam_IK_data_base:
  distance_metric:
    type: graph_distance_metric
left_IK_file: left_IK_file.database
right_IK_file: right_IK_file.database
</rosparam>

<!-- Load Task Planner -->
<rosparam ns="prx_planning_node/task_planner">
type: base_apc_task_planner
shelf_description_file: shelf_description_motoman.txt
left_prm:
  type: motion_planning_specification
  validity_checker: 
    type: world_model_validity_checker
  sampler:
    type: apc_sampler
    mode: transit
    theta_error: 10
  distance_metric:
    type: graph_distance_metric
    distance_function: default_euclidean
  local_planner:
    type: apc_local_planner
  stopping_criteria:
    elements:
      criterion1:
        type: iteration_criterion
        condition: 4600
left_prm_grasp:
  type: motion_planning_specification
  validity_checker: 
    type: world_model_validity_checker
  sampler:
    type: apc_sampler
    mode: transfer
    theta_error: 10
  distance_metric:
    type: graph_distance_metric
    distance_function: default_euclidean
  local_planner:
    type: apc_local_planner
  stopping_criteria:
    elements:
      criterion1:
        type: iteration_criterion
        condition: 4600
right_prm:
  type: motion_planning_specification
  validity_checker: 
    type: world_model_validity_checker
  sampler:
    type: apc_sampler
    mode: transit
    theta_error: 10
  distance_metric:
    type: graph_distance_metric
    distance_function: default_euclidean
  local_planner:
    type: apc_local_planner
  stopping_criteria:
    elements:
      criterion1:
        type: iteration_criterion
        condition: 4600
right_prm_grasp:
  type: motion_planning_specification
  validity_checker: 
    type: world_model_validity_checker
  sampler:
    type: apc_sampler
    mode: transfer
    theta_error: 5
  distance_metric:
    type: graph_distance_metric
    distance_function: default_euclidean
  local_planner:
    type: apc_local_planner
  stopping_criteria:
    elements:
      criterion1:
        type: iteration_criterion
        condition: 4600
</rosparam>

<!-- Load Motion Planner -->
<rosparam ns="prx_planning_node/task_planner/planners">
left_prm:
  type: apc_planner
  space_name: left_manipulator
  shelf_description_file: shelf_description_motoman.txt
  lazy_collision_mode: false
  inside_samples: 150
  trajectory_subsampling: 10
  heuristic_search: 
    type: prm_astar
left_prm_grasp:
  type: apc_planner
  space_name: left_manipulator
  shelf_description_file: shelf_description_motoman.txt
  lazy_collision_mode: false
  inside_samples: 150
  trajectory_subsampling: 10
  heuristic_search: 
    type: prm_astar
right_prm:
  type: apc_planner
  space_name: right_manipulator
  shelf_description_file: shelf_description_motoman.txt
  lazy_collision_mode: false
  inside_samples: 150
  trajectory_subsampling: 10
  heuristic_search: 
    type: prm_astar
right_prm_grasp:
  type: apc_planner
  space_name: right_manipulator
  shelf_description_file: shelf_description_motoman.txt
  lazy_collision_mode: false
  inside_samples: 150
  trajectory_subsampling: 10
  heuristic_search: 
    type: prm_astar
</rosparam>

<!-- Load Problem Definition -->
<rosparam ns="prx_planning_node/problems">
baxter_problem:
  specification:
    type: base_apc_task_specification
  query:
    type: base_apc_task_query
    query_collision_type: lazy_collisions
    start_state: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    goal:
      type: "multiple_goal_states"
      distance_metric:
        type: graph_distance_metric
      goal_states: 
        - state: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
</rosparam>

<!-- Load Node --> 

<param name="robot_description" command="$(find xacro)/xacro.py '$(find motoman_sda10f_support)/urdf/sda10f.xacro'"/>
  <rosparam command="load" file="$(find prx_simulation)/urdf/joint_names_sda10f.yaml" />
  <!--
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
-->

<arg name="command_args" value="-d $(find prx_planning)/launch/motoman_robotiq_planning.rviz" />
<node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"
  args="$(arg command_args)" output="screen" />


<node name="prx_planning_node" pkg="prx_planning" type="prx_planning_exe" required="true" 
    launch-prefix="" output="screen" args="prx_planning_node" />

</launch>
