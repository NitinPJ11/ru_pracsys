<!-- This file has been tested on PRACSYS revision ???? -->

<launch>
<rosparam ns="simulation" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
<rosparam ns="simulation" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
<rosparam ns="simulation/controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <rosparam command="load" ns="simulation/baxter" file="$(find motoman)/input/motoman.yaml"/>

<rosparam ns="simulation/simulator/subsystems/consumer">
  template: "controller"
  keep_last_control: false
  keep_last_state: false
</rosparam>
<!--
<rosparam ns="simulation/simulator/obstacles">
# floor:
#   type: obstacle
#   geometries:
#     -
#       name: blah
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [.88 .42 .81]
#         orientation: [0 0 0 1]
#     -
#       name: blah2
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [.88 .42 1.035]
#         orientation: [0 0 0 1]
#     -
#       name: blah3
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [.88 .17 .81]
#         orientation: [0 0 0 1]
#     -
#       name: blah4
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [.88 .17 1.03]
#         orientation: [0 0 0 1]
#     -
#       name: xblah
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [1.3, .42, .81]
#         orientation: [0 0 0 1]
#     -
#       name: xblah2
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [1.3, .42, 1.035]
#         orientation: [0 0 0 1]
#     -
#       name: xblah3
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [1.3, .17, .81]
#         orientation: [0 0 0 1]
#     -
#       name: xblah4
#       collision_geometry:
#         type: box
#         dims: [.02 .02 .02]
#         material: dark_red
#       config:
#         position: [1.3, .17, 1.03]
#         orientation: [0 0 0 1]
#     -
#       name: foasihfdius
#       collision_geometry:
#         type: box
#         dims: [.015 .015 .015]
#         material: baxter_red
#       config:
#         position: [0.19253 .86965 1.21745]
#         # orientation: [0.00409697 0.706813 -0.707376 0.00410023]
#         # orientation: [0 0 0 1]
#         orientation: [0, -0.707106781, 0, 0.707106781]
</rosparam>
-->
<rosparam ns="simulation/simulator/subsystems/consumer/subsystems/rover">
template: "baxter"
</rosparam>

  <rosparam ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam ns="planning">
random_seed: 1111
consumer_mapping:
  - 
    pair: [simulator/consumer, full_space]
</rosparam>
        
  <!-- Load template files -->
       
  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
 
  <rosparam ns="planning/task_planner/" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>

  <rosparam ns="planning/task_planner/" >
  </rosparam>

<rosparam ns="planning/task_planner/planners/" >
planner1:
  template: "motion_planner"
  type: rrt_star
  space_name: full_space
  visualization_body: "simulator/rover/arm_left_link_tool0"
  visualize_tree: false
  visualize_solution: true
  sample_metric:
    type: graph_distance_metric
  max_points: 100001
  delta_drain: .05
  steering: false
  delta_near: 0
  collision_checking: true
  use_heuristic: false
  branch_and_bound: true
  rrt_first: true
  goal_bias_rate: .9
  reset_count: 5000
</rosparam>
       
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam ns="planning/problems">
problem1:
  specification:
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
      cost_function: duration_cost
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: bvp_local_planner
      lower_multiple: 5
      upper_multiple: 20
    seeds:
      -
        state: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 10000
  query:
    template: "query_type"
    start_state: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
    goal:
      type: radial_goal_region
      goal_state: [0 1.5 1.54 1.6 1.45 0 0 0 0 0 0 0 0 0 0 0]
      radius: .1
      distance_metric:
        type: ann_distance_metric
</rosparam>

<rosparam ns="planning">
  system_mapping:
  - 
    pair: [simulator/consumer/rover, world_model/simulator/rover]

  consumer: simulator/consumer
</rosparam>

  <rosparam ns="planning/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
   
  <rosparam ns="planning/world_model/simulator/subsystems/rover" file="$(find motoman)/input/motoman.yaml"/>

  <!-- Define the simulation node -->
  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
    required="true" launch-prefix="" output="screen" args="simulation"/>

  <node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="" output="screen" args="planning" />

  <include file="$(find baxter)/input/visualization.launch"/>

</launch>
